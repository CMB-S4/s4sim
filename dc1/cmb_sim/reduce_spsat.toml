[operators.flag_sso]
    class = "toast.ops.flag_sso.FlagSSO"
    API = 0 # Internal interface version for this operator
    det_flag_mask = 3 # Bit mask to raise flags with
    det_flags = "flags" # Observation detdata key for flags to use
    detector_pointing = "None" # Operator that translates boresight Az/El pointing into detector frame
    enabled = true # If True, this class instance is marked as enabled
    name = "flag_sso" # The 'name' of this class instance
    sso_names = ["Moon"] # Names of the SSOs, must be recognized by pyEphem
    sso_radii = ["5.0 deg"] # Radii around the sources to flag
    times = "times" # Observation shared key for timestamps
    view = "None" # Use this view of the data in all observations

[operators.cadence_map]
    class = "toast.ops.cadence_map.CadenceMap"
    det_flag_mask = 255 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    name = "cadence_map" # The 'name' of this class instance
    output_dir = "." # Write output data products to this directory
    pixel_dist = "None" # The Data key containing the submap distribution
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator.
    save_pointing = false # If True, do not clear pixel numbers after use
    shared_flag_mask = 0 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    times = "times" # Observation shared key for timestamps

[operators.crosslinking]
    class = "toast.ops.crosslinking.CrossLinking"
    API = 0 # Internal interface version for this operator
    det_flag_mask = 255 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    name = "crosslinking" # The 'name' of this class instance
    output_dir = "." # Write output data products to this directory
    pixel_dist = "pixel_dist" # The Data key where the PixelDist object should be stored
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator.
    save_pointing = false # If True, do not clear pixel numbers after use
    shared_flag_mask = 0 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    sync_type = "alltoallv" # Communication algorithm: 'allreduce' or 'alltoallv'

[operators.raw_statistics]
    class = "toast.ops.statistics.Statistics"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key to analyze
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = true # If True, this class instance is marked as enabled
    name = "raw_statistics" # The 'name' of this class instance
    output_dir = "None" # If specified, write output data products to this directory
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "None" # Observation shared key for telescope flags to use
    view = "None" # Use this view of the data in all observations

[operators.deconvolve_time_constant]
    class = "toast.ops.time_constant.TimeConstant"
    API = 0 # Internal interface version for this operator
    deconvolve = true # Deconvolve the time constant instead.
    det_data = "signal" # Observation detdata key apply filtering to
    enabled = false # If True, this class instance is marked as enabled
    name = "deconvolve_time_constant" # The 'name' of this class instance
    realization = 0 # Realization ID, only used if tau_sigma is nonzero
    tau = "None" # Time constant to apply to all detectors.  Overrides `tau_name`
    tau_name = "None" # Key to use to find time constants in the Focalplane.
    tau_sigma = "None" # Randomized fractional error to add to each time constant.

[operators.groundfilter]
    class = "toast.ops.groundfilter.GroundFilter"
    API = 0 # Internal interface version for this operator
    azimuth = "azimuth" # Observation shared key for Azimuth
    boresight_azel = "boresight_azel" # Observation shared key for boresight Az/El
    det_data = "signal" # Observation detdata key for accumulating atmosphere timestreams
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    detrend = false # Subtract the fitted trend along with the ground template
    enabled = false # If True, this class instance is marked as enabled
    filter_order = 100 # Order of a Legendre polynomial to fit as a function of azimuth.
    ground_flag_mask = 1 # Bit mask to use when adding flags based on ground filter failures.
    name = "groundfilter" # The 'name' of this class instance
    shared_flag_mask = 0 # Bit mask value for optional shared flagging
    shared_flags = "None" # Observation shared key for telescope flags to use
    split_template = false # Apply a different template for left and right scans
    trend_order = 5 # Order of a Legendre polynomial to fit along with the ground template.
    view = "None" # Use this view of the data in all observations

[operators.polyfilter1D]
    class = "toast.ops.polyfilter.PolyFilter"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key apply filtering to
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    name = "polyfilter1D" # The 'name' of this class instance
    order = 3 # Polynomial order
    pattern = ".*" # Regex pattern to match against detector names. Only detectors that match the pattern are filtered.
    poly_flag_mask = 0 # Bit mask value for intervals that fail to filter
    shared_flag_mask = 0 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    view = "scanning" # Use this view of the data in all observations

[operators.polyfilter2D]
    class = "toast.ops.polyfilter.PolyFilter2D"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key apply filtering to
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    focalplane_key = "None" # Which focalplane key to match
    name = "polyfilter2D" # The 'name' of this class instance
    order = 5 # Polynomial order
    pattern = ".*" # Regex pattern to match against detector names. Only detectors that match the pattern are filtered.
    poly_flag_mask = 1 # Bit mask value for intervals that fail to filter
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    times = "times" # Observation shared key for timestamps
    use_python = false # If True, use a pure python implementation for testing.
    view = "None" # Use this view of the data in all observations

[operators.common_mode_filter]
    class = "toast.ops.polyfilter.CommonModeFilter"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key apply filtering to
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    focalplane_key = "tube" # Which focalplane key to match
    name = "common_mode_filter" # The 'name' of this class instance
    pattern = ".*" # Regex pattern to match against detector names. Only detectors that match the pattern are filtered.
    poly_flag_mask = 0 # Bit mask value for intervals that fail to filter
    shared_flag_mask = 0 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use

[operators.filtered_statistics]
    class = "toast.ops.statistics.Statistics"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key to analyze
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "None" # Observation detdata key for flags to use
    enabled = true # If True, this class instance is marked as enabled
    name = "filtered_statistics" # The 'name' of this class instance
    output_dir = "None" # If specified, write output data products to this directory
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    view = "None" # Use this view of the data in all observations

[operators.binner]
    class = "toast.ops.mapmaker_binning.BinMap"
    API = 0 # Internal interface version for this operator
    binned = "binned" # The Data key where the binned map should be stored
    covariance = "covariance" # The Data key containing the noise covariance PixelData instance
    det_data = "signal" # Observation detdata key for the timestream data
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = true # If True, this class instance is marked as enabled
    full_pointing = false # If True, expand pointing for all detectors and save
    name = "binner" # The 'name' of this class instance
    noise_model = "noise_model" # Observation key containing the noise model
    noiseweighted = "None" # The Data key where the noiseweighted map should be stored
    pixel_dist = "pix_dist" # The Data key where the PixelDist object should be stored
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    pre_process = "None" # Optional extra operator to run prior to binning
    shared_flag_mask = 1 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    sync_type = "alltoallv" # Communication algorithm: 'allreduce' or 'alltoallv'

[operators.mapmaker]
    class = "toast.ops.mapmaker.MapMaker"
    API = 0 # Internal interface version for this operator
    binning = "None" # Binning operator used for solving template amplitudes
    convergence = 1e-12 # Relative convergence limit
    det_data = "signal" # Observation detdata key for the timestream data
    enabled = false # If True, this class instance is marked as enabled
    iter_max = 100 # Maximum number of iterations
    keep_final_products = false # If True, keep the map domain products in data after write
    keep_solver_products = false # If True, keep the map domain solver products in data
    map_binning = "None" # Binning operator for final map making.  Default is same as solver
    map_rcond_threshold = 1e-08 # For final map, minimum value for inverse pixel condition number cut.
    mask = "None" # Data key for pixel mask to use in solving.  First bit of pixel values is tested
    mc_index = "None" # The Monte-Carlo index
    mc_mode = false # If True, re-use solver flags, sparse covariances, etc
    name = "mapmaker" # The 'name' of this class instance
    output_dir = "." # Write output data products to this directory
    overwrite_cleaned = false # If True and save_cleaned is True, overwrite the input data
    reset_pix_dist = false # Clear any existing pixel distribution.  Useful when applyingrepeatedly to different data objects.
    save_cleaned = false # If True, save the template-subtracted detector timestreams
    solve_rcond_threshold = 1e-08 # When solving, minimum value for inverse pixel condition number cut.
    template_matrix = "None" # This must be an instance of a template matrix operator
    write_cov = true # If True, write the white noise covariance matrices.
    write_hits = true # If True, write the hits map
    write_invcov = true # If True, write the inverse white noise covariance matrices.
    write_map = true # If True, write the projected map
    write_noiseweighted_map = true # If True, write the noise-weighted map
    write_rcond = true # If True, write the reciprocal condition numbers.
    write_hdf5 = true

[operators.pixels_radec_final]
    class = "toast.ops.pixels_healpix.PixelsHealpix"
    API = 0 # Internal interface version for this operator
    create_dist = "None" # Create the submap distribution for all detectors and store in the Data key specified
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    enabled = false # If True, this class instance is marked as enabled
    name = "pixels_radec_final" # The 'name' of this class instance
    nest = true # If True, use NESTED ordering instead of RING
    nside = 512 # The NSIDE resolution
    nside_submap = 16 # The NSIDE of the submap resolution
    pixels = "pixels" # Observation detdata key for output pixel indices
    quats = "None" # Observation detdata key for output quaternions
    single_precision = false # If True, use 32bit int in output
    view = "None" # Use this view of the data in all observations

[operators.binner_final]
    class = "toast.ops.mapmaker_binning.BinMap"
    API = 0 # Internal interface version for this operator
    binned = "binned" # The Data key where the binned map should be stored
    covariance = "covariance" # The Data key containing the noise covariance PixelData instance
    det_data = "signal" # Observation detdata key for the timestream data
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    full_pointing = false # If True, expand pointing for all detectors and save
    name = "binner_final" # The 'name' of this class instance
    noise_model = "noise_model" # Observation key containing the noise model
    noiseweighted = "None" # The Data key where the noiseweighted map should be stored
    pixel_dist = "pix_dist_final" # The Data key where the PixelDist object should be stored
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    pre_process = "None" # Optional extra operator to run prior to binning
    shared_flag_mask = 0 # Bit mask value for optional telescope flagging
    shared_flags = "None" # Observation shared key for telescope flags to use
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    sync_type = "alltoallv" # Communication algorithm: 'allreduce' or 'alltoallv'

[operators.filterbin]
    class = "toast.ops.filterbin.FilterBin"
    API = 0 # Internal interface version for this operator
    azimuth = "azimuth" # Observation shared key for Azimuth
    binning = "None" # Binning operator for map making.
    cache_dir = "None" # Cache directory for additive observation matrix products
    deproject_map = "None" # Healpix map containing the deprojection templates: intensity map and its derivatives
    deproject_nnz = 1 # Number of deprojection templates to regress.  Must be less than or equal to number of columns in `deproject_map`.
    deproject_pattern = ".*" # Regular expression to test detector names with.  Only matching detectors will be deprojected.  Used to identify differenced TOD.
    det_data = "signal" # Observation detdata key for the timestream data
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = true # If True, this class instance is marked as enabled
    ground_filter_order = 10 # Order of a Legendre polynomial to fit as a function of azimuth.
    leftright_mask = 8 # Bit mask value left-to-right scans
    maskfile = "None" # Optional processing mask
    name = "filterbin" # The 'name' of this class instance
    output_dir = "." # Write output data products to this directory
    poly_filter_order = 3 # Polynomial order
    poly_filter_view = "scanning" # Intervals for polynomial filtering
    rcond_threshold = 0.001 # Minimum value for inverse pixel condition number cut.
    reset_pix_dist = false # Clear any existing pixel distribution.  Useful when applyingrepeatedly to different data objects.
    rightleft_mask = 16 # Bit mask value left-to-right scans
    shared_flag_mask = 1 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    split_ground_template = false # Apply a different template for left and right scans
    write_cov = true # If True, write the white noise covariance matrices.
    write_hdf5 = true # If True, output maps are in HDF5 rather than FITS format.
    write_hits = true # If True, write the hits map
    write_invcov = true # If True, write the inverse white noise covariance matrices.
    write_map = true # If True, write the projected map
    write_noiseweighted_map = true # If True, write the noise-weighted map
    write_obs_matrix = false # Write the observation matrix
    write_rcond = true # If True, write the reciprocal condition numbers.

[templates]
[templates.baselines]
    class = "toast.templates.offset.Offset"
    data = "None" # This must be an instance of a Data class (or None)
    det_data = "None" # Observation detdata key for the timestream data
    enabled = false # If True, this class instance is marked as enabled
    flag_mask = 0 # Bit mask value for solver flags
    flags = "None" # Observation detdata key for solver flags to use
    good_fraction = 0.5 # Fraction of unflagged samples needed to keep a given offset amplitude
    name = "baselines" # The 'name' of this class instance
    noise_model = "None" # Observation key containing the optional noise model
    precond_width = 20 # Preconditioner width in terms of offsets / baselines
    step_time = "1.00000000000000e+04 s" # Time per baseline step
    times = "times" # Observation shared key for timestamps
    use_noise_prior = false # Use detector PSDs to build the noise prior and preconditioner
    view = "None" # Use this view of the data in all observations
